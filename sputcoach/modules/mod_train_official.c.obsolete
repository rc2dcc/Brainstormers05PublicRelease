/* Author:
 *
 * This is a module for training with the async server
 *
 */

#include "mod_train_official.h"
#include "messages.h"
#include "str2val.h"

namespace train_run{
  long start_time;
  long duration;
  long sequence_nr;
  long near_goals;
  long goalie_catched;
  long last_protocolled_at;
  long to_or_succ_sequences;
}

namespace statistics{
  //long lap_runs;
  //long lap_cycles;
  long cycles;
  long sequence_len;
  long max_sequence_len;
  long total_time;
  long succ_sequences;
  long succ_seq_len;
}

namespace parameter{
  bool stopif_op_ball;
  bool stopif_team_ball;
  bool stopif_ball_left;
  bool stopif_pass_success;
  bool stopif_goal;
  long stop_after_goals;
  bool stopif_ball_intercepted;
  bool stopif_opponent_close;
  long stop_after_sequences;
  long statfreq;
  bool autostart;
  float targetspeed, targetdir;
  float ballspeed_tolerance, balldir_tolerance;
  float kickrange;
}
#define KICK_RANGE_DEF 1.085


//int pos_seq = 0;

bool ModTrainOfficial::init(int argc,char **argv) {
  cout << "\nInitialising Train-Module...";
  argc--;
  argv++;
  sit_loop= false;

  sprintf(prot_file,"%s","");

  ValueParser vp(argc,argv);
  vp.get("train_file", train_file, MAX_STR_LEN);
  vp.get("conf_file", conf_file, MAX_STR_LEN);
  vp.get("prot_file", prot_file, MAX_STR_LEN);
  vp.get("res_file", res_file, MAX_STR_LEN);

  protocol_on = false;
  res_file_on = false;

  if ( strlen(prot_file) > 1 ) {
    cout << "Protfile " << prot_file << endl;
    protf = fopen(prot_file,"w");
    protocol_on = true;
  }
  if ( strlen(res_file) > 1 ) {
    cout <<"Resfile " << res_file << endl;
    resf = fopen(res_file,"w");
    res_file_on=true;
  }

  cout << "Protocol: " << protocol_on << endl;
  cout << "Resultfile: " << res_file_on << endl;

  if ( strlen(train_file) ) {
    cout << "\nLoading Table from " << train_file;
    sit.load_table(train_file);
  }
  // defaults:
  train_run::last_protocolled_at = -1;
  train_run::duration = 1000000; // default: don't stop
  train_run::to_or_succ_sequences = 0;

  //statistics::lap_runs = 0;
  statistics::cycles = 0;
  //statistics::lap_cycles = 0;
  statistics::total_time = 0;
  statistics::succ_sequences = 0;
  statistics::succ_seq_len = 0;


  parameter::stopif_team_ball = false;
  parameter::stopif_op_ball = false;
  parameter::stopif_goal = false;
  parameter::stop_after_goals = 0;
  parameter::stopif_pass_success= false;
  parameter::stopif_ball_intercepted = false;
  parameter::stopif_opponent_close = false;
  parameter::stop_after_sequences = 0;
  parameter::statfreq = 100;
  parameter::targetspeed = 2.5;
  parameter::targetdir = 0.0;
  parameter::ballspeed_tolerance = 0.2;
  parameter::balldir_tolerance = 0.07;
  parameter::autostart = false;
  parameter::kickrange = KICK_RANGE_DEF;

  //ValueParser vp(Options::coach_conf,"ModChange");

  if ( strlen(conf_file) ) {
    ValueParser vp(conf_file);   
    vp.get("duration", train_run::duration);
    vp.get("stopif_op_ball", parameter::stopif_op_ball);
    vp.get("stopif_team_ball", parameter::stopif_team_ball);
    vp.get("stopif_ball_left", parameter::stopif_ball_left);
    vp.get("stopif_pass_success", parameter::stopif_pass_success);
    vp.get("stopif_ball_intercepted", parameter::stopif_ball_intercepted);
    vp.get("stopif_opponent_close", parameter::stopif_opponent_close);
    vp.get("stopif_goal", parameter::stopif_goal);
    vp.get("stop_after_goals", parameter::stop_after_goals);
    vp.get("stop_after_sequences", parameter::stop_after_sequences);
    vp.get("statfreq", parameter::statfreq);
    vp.get("targetspeed", parameter::targetspeed);
    vp.get("speed_tolerance", parameter::ballspeed_tolerance);
    vp.get("autostart", parameter::autostart);
    cout << " autostart = " << parameter::autostart << "\n";
    vp.get("kickrange", parameter::kickrange);
  }
  else{
    cout<<"\nTrainCoach: Warning: no conf-file defined"<<endl;
  }
  player_type = 0;
  return true;
}


bool ModTrainOfficial::destroy() {
  
  return true;
}


bool ModTrainOfficial::behave() {
  int stopped;

  /*
    if(sequence::loops == parameter::stop_after_loops){
    protocol_sit();
    sequence::loops = 0;
    statistics::total_time = 0;
    }*/

  if (MSG::msg[MSG::MSG_TEAM_NAMES]->lastAck == -1){
    //cerr << " teamnames \n";
    return true;
  }


  if ((fld.getTime() == 0) && (parameter::autostart == true)) {
    if (MSG::msg[MSG::MSG_CHANGE_MODE]->lastSent == 0) return true;
    sit_loop= true;
    cerr << "\nStarting first sequence!" << flush;
    start_new_sequence();
    MSG::sendMsg(MSG::MSG_CHANGE_MODE, PM_play_on);
    return true;
  }


  if(sit_loop){
    if(fld.getPM() != PM_play_on) {
      cerr << "current play mode is " << fld.getPM() << "\n";
      cerr << "sending change mode\n";
      MSG::sendMsg(MSG::MSG_CHANGE_MODE, PM_play_on);
      //fld.setPM(PM_play_on);
    }



    //statistics::lap_cycles ++;
    statistics::cycles ++;
    statistics::sequence_len++;
    statistics::total_time++;
    if ((stopped = check_stop_sequence())){
      //statistics::lap_cycles --;  //correct value
      //statistics::sequence_len--; //correct value
      if (stopped == NEAR_GOAL || stopped == GOAL) {
	statistics::succ_sequences++;
	statistics::succ_seq_len += statistics::sequence_len;
      }
      if (stopped == NEAR_GOAL || stopped == GOAL ||stopped == TIME_OVER) {
	train_run::to_or_succ_sequences++;
      }
      /*
	if (pos_seq == 0)
	pos_seq = 1;
	else if (pos_seq == 1)
	pos_seq = 2;
      */
      protocol_sit(stopped);
      //print_statistics();
      if ((parameter::stop_after_sequences && train_run::sequence_nr >= parameter::stop_after_sequences) ||
	  (parameter::stop_after_goals && train_run::near_goals >= parameter::stop_after_goals)) {
	//Cmd::send_change_mode(PM_TIME_UP);
	print_statistics();
	sit_loop = false;
	fclose(protf);
	fclose(resf);
	exit(0);
      }
      else {
	if(statistics::sequence_len > statistics::max_sequence_len)
	  statistics::max_sequence_len = statistics::sequence_len;
	statistics::sequence_len = 0;
	cerr << "time = " << fld.getTime() << "starting new sequence! " << "\n";
	start_new_sequence(); // nach dem Spiel ist vor dem Spiel
      }
    }
    else
      protocol_sit();
  }  
  return true;
}


bool ModTrainOfficial::onRefereeMessage(bool PMChange) {
  
  return true;
}


bool ModTrainOfficial::onKeyboardInput(const char *str) {
  // start loop
  if (! strncmp(str,"l",1)){
    int n=0;
    sscanf(str,"%*s %d",&n);
    if(n>0)
      parameter::stop_after_sequences=n;
    train_run::sequence_nr = 0;
    train_run::near_goals = 0;
    sit_loop= true;
    start_new_sequence();
    return true;
  }
  // stop loop
  if (! strncmp(str,"!l",2)){
    sit_loop= false;
    cout << "\n>>> loop off " << flush;
    return true;
  }
  // set situation
  if (! strncmp(str,"s",1)){
    int n;
    sscanf(str,"%*s %d",&n);
    sit.set_cur_sit(n);
    start_new_sequence();
    //cout << "\n>>> set sit " << n << flush;
    return true;
  }
 // set situation, but don't start sequence
  if (! strncmp(str,"v",1)){
    int n;
    sscanf(str,"%*s %d",&n);
    sit.set_cur_sit(n);
    sit.send_cur_situation();
    //start_new_sequence();
    //cout << "\n>>> set sit " << n << flush;
    return true;
  }
  // set duration
  if (! strncmp(str,"d",1)){
    int n;
    sscanf(str,"%*s %d",&n);
    train_run::duration = n;
    cout << "\n>>> new duration " << train_run::duration << flush;
    return true;
  }
  return false;
}


bool ModTrainOfficial::onHearMessage(const char *str) {

  return false;
}


bool ModTrainOfficial::onChangePlayerType(bool ownTeam,int unum,int type=-1) {

  return false;
}

void ModTrainOfficial::protocol_sit(int terminated){

  /*if(train_run::sequence_nr < 2) // forget the first sequence
    return;*/
  if (fld.getTime() == 0) return;
  if(protocol_on == false)
    return;
  if(train_run::last_protocolled_at == fld.getTime()  &&
     terminated != GOAL)
    return;

  train_run::last_protocolled_at = fld.getTime();

  //#define CORRECT_Y 1.0

  fprintf(protf,"%ld %d %d %.1f %.1f %.1f %.1f ",fld.getTime(), fld.getPM(), 
	  terminated,
	  fld.ball.pos_x,fld.ball.pos_y,
	  fld.ball.vel_x,fld.ball.vel_y);

    for (int i = 0 ; i < 11 ; i++){
      if(fld.myTeam[i].alive)
	fprintf(protf,"%.1f %.1f ", fld.myTeam[i].pos_x,
		fld.myTeam[i].pos_y);
      else
	fprintf(protf,"0 0 ");
    }
    for (int i = 0 ; i < 11 ; i++){
      if(fld.hisTeam[i].alive)
	fprintf(protf,"%.1f %.1f ",fld.hisTeam[i].pos_x,
		fld.hisTeam[i].pos_y);
      else
	fprintf(protf,"0 0 ");
    }


  fprintf(protf,"\n");
  fflush(protf);
  train_run::last_protocolled_at = fld.getTime();
  if(terminated)
    fprintf(protf,"#end of sequence %ld ----------------------------\n",train_run::sequence_nr);

}

void ModTrainOfficial::print_statistics(){
  /*
  statistics::lap_runs++;
  if (parameter::stop_after_goals && train_run::near_goals >= parameter::stop_after_goals) {

  } else if(statistics::lap_runs<parameter::statfreq) {
    return;
    }*/
  

  fprintf(resf, " Seq %ld Cyc %ld Avg Seq len %f near goals quota %f Succ Seq Avg len %f time over quota %f goalie catched quota %f shot2goal quota %f\n",
	  train_run::sequence_nr, statistics::cycles, statistics::cycles/(float)train_run::sequence_nr,
	  train_run::near_goals/(float)(train_run::sequence_nr), statistics::succ_seq_len/(float)statistics::succ_sequences,
	  train_run::near_goals/(float)(train_run::to_or_succ_sequences),
	  train_run::goalie_catched/(float)(train_run::sequence_nr),
	  (train_run::near_goals + train_run::goalie_catched)/(float)(train_run::sequence_nr));
  fflush(resf);

  cout<<"Seq "<<train_run::sequence_nr<<" Cyc "<<statistics::cycles
      <<"Avg Seq len "<< statistics::cycles/(float)train_run::sequence_nr
    //<<" near goals shot "<< sequence::near_goals 
      <<" near goals quota "<<train_run::near_goals/(float)(train_run::sequence_nr)
      << " Succ Seq Avg len " << statistics::succ_seq_len/(float)statistics::succ_sequences
      << " time over quota " << train_run::near_goals/(float)(train_run::to_or_succ_sequences)
    //<<" goalie catched "<< sequence::goalie_catched 
      <<" goalie catched quota "<<train_run::goalie_catched/(float)(train_run::sequence_nr)
      <<" shot2goal quota "<<(train_run::near_goals + train_run::goalie_catched)
    /(float)(train_run::sequence_nr)
      <<endl;

  //statistics::lap_runs = 0;
  //statistics::lap_cycles = 0;
  statistics::max_sequence_len = 0;

}


int ModTrainOfficial::check_stop_sequence(){
  Vector player,ball;

  if(fld.getTime() >= train_run::start_time + train_run::duration){
    cerr << "time over\n";
    return TIME_OVER;
  }
  
  int PM = fld.getPM();

  if((PM != PM_play_on) && (PM != PM_time_over)) {
    cerr << "play_mode in check_stop_sequence is " << PM;
    /*
    if(coach_info->playmode== PM_KICKOFF_R){
      sequence::near_goals++;
      return GOAL;
      }*/
    if(PM == PM_free_kick_r){
      cerr << "Goalie catched!" << endl;
      //train_run::goalie_catched++;
      train_run::near_goals++;
      return NEAR_GOAL;
      //return GOALIE_CATCHED;
    }
    if (PM == RM_goal_l) {
      cerr << " Goal detected!\n";
      train_run::near_goals++;
      return GOAL;
    }
    else {
      cerr << "game interrupted!\n";
      return GAME_INTERRUPTED;
    }
  }



  //DANIEL only to test learning
  //if (drand48() < 0.4) {

  /*
    player.x = fld.myTeam[2].pos_x;
    player.y = fld.myTeam[2].pos_y;
    ball.x = fld.ball.pos_x;
    ball.y = fld.ball.pos_y;
    if((player-ball).norm() <= parameter::kickrange){
    if (pos_seq == 2) {
    cerr << "\nBALL_INTERCEPTED" << flush;
    return OPPONENT_CLOSE;
    }
    }*/
//}


  if(parameter::stopif_goal){
    if (fld.ball.pos_x > 52.5 &&
       fabs(fld.ball.pos_y) < 7.01) {
      cerr << " Near Goal detected!\n";
      train_run::near_goals++;
      return NEAR_GOAL;
    }
  }    

  if (parameter::stopif_opponent_close) {
    int i;

    ball.x = fld.ball.pos_x;
    ball.y = fld.ball.pos_y;

    for (i = 0 ; i < 11 ; i++) {
      if(!fld.myTeam[i].alive) continue;
      player.x = fld.myTeam[i].pos_x;
      player.y = fld.myTeam[i].pos_y;
      if((player-ball).norm() <= parameter::kickrange) {
	break;
      }
    } //my player i holds ball
    if (i < 11) {
      ball.x = fld.myTeam[i].pos_x;
      ball.y = fld.myTeam[i].pos_y;
      for (int j = 0 ; j < 11 ; j++) {
	if(!fld.hisTeam[j].alive) continue;
	player.x = fld.hisTeam[j].pos_x;
	player.y = fld.hisTeam[j].pos_y;
	if((player-ball).norm() <= 0.8) {
	  cerr << "\nOPPONENT_CLOSE" << flush;
	  return OPPONENT_CLOSE;
	}
      }
    } 
  }

  if (parameter::stopif_ball_intercepted) {
    for (int i = 0 ; i < 11 ; i++){ // do consider goalie
      if(!fld.hisTeam[i].alive) continue;
      player.x = fld.hisTeam[i].pos_x;
      player.y = fld.hisTeam[i].pos_y;
      ball.x = fld.ball.pos_x;
      ball.y = fld.ball.pos_y;
      if((player-ball).norm() <= parameter::kickrange){
	cerr << "\nBALL_INTERCEPTED" << flush;
	return BALL_INTERCEPTED;
      }
    }    
  }

  if (parameter::stopif_op_ball) {
    ball.x = fld.ball.pos_x;
    ball.y = fld.ball.pos_y;
    for (int i = 1 ; i < 11 ; i++){ // do not consider goalie
      if (!fld.hisTeam[i].alive) continue;
      player.x = fld.hisTeam[i].pos_x;
      player.y = fld.hisTeam[i].pos_y;
      if((player-ball).norm() <= parameter::kickrange){
	cerr << "\nOP_HAS_BALL" << flush;
	return OP_HAS_BALL;
      }
    }    
  }

  if (parameter::stopif_team_ball) {
    for (int i = 0 ; i < 11 ; i++){ // do consider goalie
      if(!fld.myTeam[i].alive) continue;
      player.x = fld.myTeam[i].pos_x;
      player.y = fld.myTeam[i].pos_y;
      ball.x = fld.ball.pos_x;
      ball.y = fld.ball.pos_y;
      if((player-ball).norm() <= parameter::kickrange){
	cerr << "\nTEAM_HAS_BALL" << flush;
	return TEAM_HAS_BALL;
      }
    }    
  }

  return CONTINUE;
}


void ModTrainOfficial::start_new_sequence(){
  sit.send_cur_situation();  
  train_run::sequence_nr++;
  MSG::sendMsg(MSG::MSG_RECOVER);
  MSG::sendMsg(MSG::MSG_SAY, 6, "reset int");
  //cerr << "\n coach sends reset int \n";
  cerr << "\nSequence-Number:" << train_run::sequence_nr;
  train_run::start_time = fld.getTime();
}



/* Don't forget this one... */
const char ModTrainOfficial::modName[];


//////////////////////////////////////////////////////////////////////////////////////
//////////////////// Supporting Classes //////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////


ostream& operator<< (ostream& o,const Table& t) {
  cout << "[";
  cout.precision(5);
  for (int st= 0; st < t.num_rows; st++) {
    cout << endl << setw(3) << st << ":";
    for (int act= 0; act < t.num_cols; act++) {
      if (act%10==0) cout << endl;
      cout << setw(8) << t(st,act);
    }
  }
  cout << "\n]";
  return o;
}

void Table::set_max_rows(int max) {
  if (max_rows > max)
    return;
  max_rows= max;
  float ** tmp= new float*[max_rows];
  for (int row=0; row<num_rows; row++)
    tmp[row]= tab[row];
  for (int row=num_rows; row < max_rows; row++) 
    tmp[row]= 0;

  delete[] tab;
  tab= tmp;
};

float Table::operator()(int row,int col) const { 
  if (col < 0 || col >= num_cols || row < 0 || row >= num_rows) 
    cerr << "\n(" << row <<"," << col << ") not in range";
  return tab[row][col]; 
}

const float * Table::operator()(int row) const{
  if (row < 0 || row >= num_rows)  
    cerr << "\n(" << row << ") not in range";
  return tab[row];
}

void Table::set(int row, int col, float value) {
  tab[row][col]= value;
}

bool Table::save(const char* fname ) const {
  ofstream out(fname);

  for (int row= 0; row < num_rows; row++) { 
    out << "\n";
    for (int col= 0; col < num_cols; col++) 
      out << " " <<  setw(6) << tab[row][col];
  }

  out.close();
  return true;
}

bool Table::load(int cols,const char* fname ) {
  const int MAX_LINE_LEN= 1024;
  char line[MAX_LINE_LEN];
  
  num_rows= 0;
  num_cols= cols;
  set_max_rows(50);

  FILE *infile=fopen(fname,"r");
  if (infile==NULL){
    fprintf(stderr,"File %s can't be opened\n", fname);
    return false;
  }
  
  float *tmp= 0;

  while(fgets(line,MAX_LINE_LEN,infile)!=NULL){
    if(*line=='\n'||*line=='#')
      continue;  /* skip comments */

    for (int i=0;i <MAX_LINE_LEN; i++) 
      if (line[i]== '\n') {
	line[i]= '\0';
	break;
      }

    if (tmp==0) 
      tmp= new float[num_cols];
    bool warning= false;
    int res= str2val( line, num_cols, tmp);
    if (res == num_cols) {
      if (num_rows >= max_rows)
	set_max_rows(max_rows+50);
      tab[num_rows]= tmp;
      num_rows++;
      tmp= 0;
    }

    if (res != num_cols || warning) {
      cout << "\n problems with reading line = " << line;
      cout << "res= " << res << ", warning = " << warning;
    }
  }
  if (tmp)
    delete[] tmp;
  fclose(infile);  
  return true;
}

char* Table::float_to_str(int num){
  char* buf = new char[1000];
  ostrstream ost(buf,1000);
  for (int i=0; i < num_cols; i++){
    if(i>0) ost << " ";
    ost << tab[num][i];
  }
  return buf;
}

/*****************************************************************************/
/*****************************************************************************/

Situations::Situations() {
  num_sit= 0; 
  cur_sit= 0;
  for (int i=0; i<NUM_OBJECTS; i++)
    set_active_obj(i);
}

void Situations::load_table(const char* fname) {
  tab.load(114,fname);
  num_sit= tab.get_num_rows();
}


void Situations::send_situation(int sit_num) {
  if (sit_num<0 || sit_num >= num_sit) return;

  if (!active[0])
    return;

  if (sit_num<0 || sit_num >= num_sit) return;

  // ridi: do not change playmode implicitly Cmd::send_change_mode(PM_PLAY_ON);
  if (!active[0])
    return;
  //if(asyncmode){

  moveBall(tab(sit_num,0), tab(sit_num,1), tab(sit_num,2), tab(sit_num,3));

  for (int i=1; i<NUM_OBJECTS; i++) {
    if (active[i]) {
      int act= 4+ (i-1)*5;
      Vector pos= Vector( tab(sit_num,act), tab(sit_num,act+1));
      double ang= tab(sit_num,act+2);
      Vector vel= Vector( tab(sit_num,act+3), tab(sit_num,act+4));
      if (ang == 0.0 && pos.x == 0.0 && pos.y == 0.0) continue;
      if (i < 12) 
	moveOwnPlayer(i, pos.x, pos.y, ang, vel.x, vel.y);      
      else 
	moveOppPlayer(i-11, pos.x, pos.y, ang, vel.x, vel.y);      
    }
  }

}

void Situations::moveBall(Value x,Value y,Value velx,Value vely) {
  MSG::sendMsg(MSG::MSG_MOVE,"ball",x,-y,0,velx,-vely);
  // - bei y-Werten, da der Server anscheinend positive y-Koordinaten nach unten zaehlt!
}

void Situations::moveOwnPlayer(int unum,Value x,Value y,Value dir,Value velx,Value vely) {
  if (!fld.myTeam[unum-1].alive) return;
  char buf[100];
  if (dir >= PI) dir -= 2*PI;
  if (dir < -PI) dir += 2*PI;
  dir = RAD2DEG(dir);
  sprintf(buf,"player %s %d",fld.getMyTeamName(),unum);
  MSG::sendMsg(MSG::MSG_MOVE,buf,x,-y, dir,velx,-vely);
}

void Situations::moveOppPlayer(int unum,Value x,Value y,Value dir,Value velx,Value vely) {
  if (!fld.hisTeam[unum-1].alive) return;
  char buf[100];
  if (dir >= PI) dir -= 2*PI;
  if (dir < -PI) dir += 2*PI;
  dir = RAD2DEG(dir);
  sprintf(buf,"player %s %d",fld.getHisTeamName(),unum);
  MSG::sendMsg(MSG::MSG_MOVE,buf,x,-y,dir,velx,-vely);
}
